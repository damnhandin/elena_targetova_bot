import logging

from fastapi import FastAPI, HTTPException
from fastapi import Request
from pydantic import BaseModel
from slowapi import Limiter
from slowapi.errors import RateLimitExceeded
from starlette.responses import JSONResponse
from starlette.status import HTTP_422_UNPROCESSABLE_ENTITY
from datetime import datetime
from bot.bot import send_to_managers
from bot.services import broadcaster

logger = logging.getLogger(__name__)
MAX_TELEGRAM_MESSAGE_LENGTH = 4000  # –∑–∞–ø–∞—Å –æ—Ç 4096


class Lead(BaseModel):
    name: str
    phone: str


# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è IP –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–ª–∏ request.client
def get_real_ip(request: Request):
    x_forwarded_for = request.headers.get("x-forwarded-for")
    if x_forwarded_for:
        return x_forwarded_for.split(',')[0].strip()
    return request.client.host


def register_routes(app: FastAPI):
    limiter = Limiter(key_func=get_real_ip)

    app.state.limiter = limiter

    app.add_exception_handler(RateLimitExceeded, lambda request, exc: JSONResponse(
        status_code=429,
        content={"error": "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞—è–≤–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."}
    ))
    logger.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–æ–≤")
    bot = app.state.bot
    manager_ids = app.state.manager_ids
    admin_ids = app.state.admin_ids

    @app.post("/submit")
    @limiter.limit("3/5minutes")
    async def submit_lead(lead: Lead, request: Request):
        lead_date = datetime.now()
        logger.info(f"–ü—Ä–∏—à–ª–∞ –∑–∞—è–≤–∫–∞ {lead.name} {lead.phone}, {lead_date}")
        client_ip = get_real_ip(request)
        # üîê –ë–∞–∑–æ–≤–∞—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π –æ–±—Ö–æ–¥–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        if not lead.name.strip() or len(lead.phone) != 12:
            logger.warning(f"[{client_ip}] ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: name='{lead.name}' phone='{lead.phone}'")
            raise HTTPException(
                status_code=HTTP_422_UNPROCESSABLE_ENTITY,
                detail="Invalid data"
            )

        logger.info(f"[{client_ip}] üì© –ó–∞—è–≤–∫–∞: {lead.name} / {lead.phone}")

        try:
            if lead.phone == "+79999999999" and lead.name.upper() == "–ø—Ä–æ–≤–µ—Ä–∫–∞".upper():
                await broadcaster.broadcast(
                    bot, admin_ids,
                    text = f"üì• <b>–ù–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–æ—á–Ω–∞—è –∑–∞—è–≤–∫–∞</b>\nüë§ –ò–º—è: {lead.name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {lead.phone}")
            else:
                await send_to_managers(lead.name, lead.phone, bot=bot, manager_ids=manager_ids)
        except Exception as e:
            error_message = f"[{client_ip}] ‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏: {str(e)}"
            await handle_error_report(error_message, bot, admin_ids)
            raise HTTPException(status_code=500, detail="Failed to process request")

        return {"status": "ok"}

    async def handle_error_report(error_message: str, bot, admin_ids: list[str]):
        logger.error(f"üì© –ü–æ–ª—É—á–µ–Ω–∞ –æ—à–∏–±–∫–∞: {error_message}", exc_info=True)

        chunks = split_text_into_chunks(error_message, MAX_TELEGRAM_MESSAGE_LENGTH - 50)

        for admin_id in admin_ids:
            for i, chunk in enumerate(chunks):
                try:
                    await bot.send_message(
                        admin_id,
                        f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –≤ —Å–µ—Ä–≤–∏—Å–µ (—á–∞—Å—Ç—å {i + 1} –∏–∑ {len(chunks)}):</b>\n<pre>{chunk}</pre>"
                    )
                except Exception as e:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –∞–¥–º–∏–Ω—É {admin_id}: {e}", exc_info=True)

    @app.post("/report-error")
    async def report_error(request: Request):
        try:
            data = await request.json()
            error_message = data.get("error")

            if not error_message:
                return JSONResponse(content={"detail": "–ü–æ–ª–µ 'error' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"}, status_code=400)

            await handle_error_report(error_message, bot, admin_ids)
            return {"status": "received"}
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç—á—ë—Ç–∞ –æ–± –æ—à–∏–±–∫–µ", exc_info=True)
            return JSONResponse(content={"detail": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç—á—ë—Ç–∞"}, status_code=500)

    def split_text_into_chunks(text: str, max_length: int) -> list[str]:
        """
        –î–µ–ª–∏—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª–∏–Ω–æ–π –Ω–µ –±–æ–ª–µ–µ max_length.
        –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–µ –æ–±—Ä–µ–∑–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ.
        """
        return [text[i:i + max_length] for i in range(0, len(text), max_length)]
